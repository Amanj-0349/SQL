Database (ddl commands)
	|
relations / Table (ddl commands)
	|
rows / record / tuple & columns / attribute / field (ddl commands)
	|
data (dml commands)


1. DDL (DATA DEFINITION LANGUAGE)
--------------------------------------
- CREATE (DATABASE , TABLE)
- TRUNCATE (TABLE)
- DROP  (DATABASE , TABLE)

1.1 DATABASE
-------------------
- CREATE DATABASE 
	CREATE DATABASE DATABASE NAME;
	EX. CREATE DATABASE CLASS;
- DROP 
	DROP database DATABASE NAME;
	EX. DROP database CLASS;

1.1.1 USE DATABASE 
---------------------------
	USE DATABASE_NAME;
	USE CLASS;

1.2 RELATIONS / TABLE 
---------------------------
- CREATE (WITHOUT CONSTRAINT)

CREATE TABLE TABLE_NAME
(
COL1_NAME DATATYPE(SIZE) CONSTRAINT,
COL2_NAME DATATYPE(SIZE) CONSTRAINT,
----------
--------
LAST_COL DATATYPE(SIZE) CONSTARINT 
);

EX. 
CREATE TABLE student
( 
name varchar(256),
roll_no int(3),
gender int,
dob date,
fee dec(10,2)
);

Q. HOW TO INSERT DATA IN A TABLE ?

INSERT INTO STUDENT 
VALUES('BHAVYA',1,'F','2007-05-02',2000.00),
('ADITYA',2,'M','2007-12-20',2000.00);
   

NOTE -  FOR DESCRIBING THE STRUCTURE 
 - DESC TABLE_NAME ; 
	EX. DESC STUDENT ; 

- DROP TABLE 
	DROP TABLE TABLE_NAME;
	EX. DROP TABLE STUDENT;

- TRUNCATE 
	TRUNCATE TABLE TABLE_NAME;
	EX . TRUNCATE TABLE STUDENT;

- 2 CONSTARINT 
---------------------------
SET OF VALUES OR CONDITIONS APPLIED ON THE COLUMN TO MAINTAIN THE INTEGRITY .

1.NOT NULL - IT DOESNOT CONTAINS THE NUL VALUE
2.UNIQUE - THE VALUES SHOULD BE UNIQUE NOT REPEATED
	-  NOTE - IT CAN STORE THE NULL VALUES
3.PRIMARY KEY - UNIQUE + NOT NULL
4.AUTO_INCREMENT - INCREASES THE ROWS BY ONE
5.DEFAULT - BE CAN A SPECIFIC VALUE FOR A COLUMN
6.CHECK - USE TO APPLY SOME CONDITION ON A COLUMN 
7.FOREIGN KEY - USED AS REFERENCE KEY AND MUST BE A PRIMARY KEY OF ONE TABLE .

2.1 CREATING TABLE WITH CONSTRAINTS 
------------------------------------

CREATE TABLE STUDENT 
(
ROLLNO INT(5) NOT NULL AUTO_INCREMENT,
NAME CHAR(25) NOT NULL,
SCHOOL CHAR(40) DEFAULT 'KVS',
EMAIL VARCHAR(256) NOT NULL,
PERCENT DEC(10,2) NOT NULL,
GENDER CHAR(1) NOT NULL,
CONSTRAINT STUDENT_PK PRIMARY KEY(ROLLNO),
CONSTRAINT STU_EMAIL UNIQUE(EMAIL),
CONSTRAINT PER_STU CHECK(PERCENT >70)
);

- CREATING THE TABLE WITH MULTIPLE COLUMN AS PRIMARY KEY 
--------------------------------------------------------

CREATE TABLE STUDENT 
(
ROLLNO INT(5) NOT NULL AUTO_INCREMENT,
NAME CHAR(25) NOT NULL,
SCHOOL CHAR(40) DEFAULT 'KVS',
EMAIL VARCHAR(256) NOT NULL,
PERCENT DEC(10,2) NOT NULL,
GENDER CHAR(1) NOT NULL,
CONSTRAINT STUDENT_PK PRIMARY KEY(ROLLNO,EMAIL),
CONSTRAINT PER_STU CHECK(PERCENT >70)
);


2.2 CREATING TABLE WITH FOREIGN KEY 
-------------------------------------
CREATE TABLE CUSTOMER 
(
CID INT(10) NOT NULL AUTO_INCREMENT PRIMARY KEY,
NAME VARCHAR(256) NOT NULL,
EMAIL VARCHAR(256) NOT NULL,
CONSTRAINT EMAIL_CUST UNIQUE(EMAIL)
);

CREATE TABLE ORDERS
(
CID INT(10) NOT NULL,
ORDERID INT(20) NOT NULL,
ORDER_DATE DATE NOT NULL,
CONSTRAINT ORD_FK FOREIGN KEY(CID) REFERENCES CUSTOMER(CID)
);

- 3 KEYS
----------------------------
- PRIMARY KEY 
- ALTERNATE KEY 
- CANDIDATE KEY 
- FOREIGN KEY
- SUPER KEY

- 4 ALTER TABLE 
----------------------------
USED TO CHANGE THE STRUCTURE OF THE TABLE 
1.ADD COLUMN 

-	ALTER TABLE STUDENT 
	ADD COLUMN STU_CLASS INT(10) NOT NULL ;

2.DELETE COLUMN 

-	ALTER TABLE STUDENT 
	DROP COLUMN STU_CLASS;

3.MODIFY COLUMN

-	ALTER TABLE CUSTOMER
	MODIFY COLUMN NAME VARCHAR(45); 

-	ALTER TABLE CUSTOMER 
	CHANGE NAME CUST_NAME VARCHAR(256) NOT NULL;

- 5 DML (DATA MANIPULATION COMMANDS)
--------------------------------------
1. INSERT 

2. UPDATE - IS USED TO UPDATE A ROW BASED ON SOME GIVEN CONDITION AND IF ANY CASE CONDITION IS MISSING THEN IT WILL UPDATE ALL THE ROWS OF THE RELATION .

- EX.	
UPDATE COUNTRIES
SET COUNTRY_NAME = "UNITED STATES OF AMERICA"
WHERE COUNTRY_ID = 2;

3. DELETE 

-EX.
DELETE FROM STUDENT 
WHERE ROLLNO=4;


NOTE -  IF YOU WANT TO UPDATE OR DELETE ANY ATTRIBUTE FOR YOUR RELATION WHICH IS NOT A KEY THEN IT WILL SHOW YOU A ERROR SHOWING (SAFE MODE ON)

HOW CAN YOU OFF THAT SAFE MODE ?
- EDIT 
	- PREFERNCES
		- SQL EDITOR (MAKE SAFE MODE OFF)

5.1 DQL (DATA QUERY LANGUAGE)
-------------------------------

-- DISPLAY ALL DETAILS FROM SCHOOL TABLE ?

SELECT *
FROM SCHOOL;


-- DISPLAY ALL DETAILS FROM SCHOOL TABLE  WHOSE FEE IS LESS THAN 60000?

SELECT *
FROM SCHOOL
WHERE FEE < 60000;


-- DISPLAY NAME OF SCHOOL WHICH IS IN BURARI ?

SELECT SCHOOL_NAME
FROM SCHOOL
WHERE ADDRESS = 'BURARI';

- BETWEEN (RANGE) + AND 
-----------------------

SELECT *
FROM SCHOOL 
WHERE FEE BETWEEN 10000 AND 60000;

- IN AND NOT IN (SEARCH MULTIPLE VALUES)
-----------------------------------------

SELECT NAME
FROM WORKER 
WHERE DEPARTMENT NOT IN ('HR','CEO');

SELECT NAME
FROM WORKER 
WHERE DEPARTMENT IN ('HR','CEO');

- ORDER BY (SORT/ASCENDING/DESCENDING)
--------------------------------------
NOTE - BY DEFAULT ASCENDING ORDER

SELECT *
FROM WORKER
ORDER BY SALARY DESC;

- GROUP BY (EACH,WISE)
-----------------------
SELECT DEPARTMENT  , COUNT(*)
FROM WORKER
GROUP BY DEPARTMENT;

- wild cards( % , _ )

LIKE (PATTERN RECOGNISTION)
-----------------------------
1.ANYWHERE IN THE DATA
-----------
SELECT NAME 
FROM WORKER 
WHERE NAME LIKE '%a%';

2.FOR STARTING CHARACTER
------------
SELECT NAME 
FROM WORKER 
WHERE NAME LIKE 'a%';

3.FOR ENDING CHARACTER
------------ 
SELECT NAME 
FROM WORKER 
WHERE NAME LIKE '%a';

4. using _ 
-----------
select *
from worker 
where name like 'r___';


6. AGGREGATE FUNCTION  +  GROUP BY  [WISE / EACH ]
------------------------------------
1. MAX()- USED TO GET THE MAXIMUM VALUE FROM THE DATA.
------------
-	EX. 
	SELECT MAX(PRICE)
	FROM WORKER;
2. MIN()- USED TO GET THE MINIMUM VALUE FROM THE DATA.
------------
-	EX. 
	SELECT MIN(PRICE)
	FROM WORKER;

3. AVG() - USED TO GET THE AVERAGE FROM THE GIVEN DATA.
------------
-	EX. 
	SELECT AVG(PRICE)
	FROM WORKER;

4. COUNT() - USED TO COUNT THE NO OF ROWS FROM THE DATA.
-------------
-	EX. 
	SELECT COUNT(*)
	FROM WORKER;

5. ROUND() - USED TO ROUND UP THE VALUES UP TO N DECIMAL PLACE.
-------------
-	EX. 
	SELECT ROUND(AVG(PRICE),2)
	FROM WORKER;

6. SUM()- USED TO CALCULATE THE SUM OF ANY FIELDS.
ннннннн-------------
-	EX. 
	SELECT SUM(SALARY)
	FROM WORKER;






	